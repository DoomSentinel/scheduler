// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DoomSentinel/scheduler/services/grpc/v1/schedulerService (interfaces: Scheduler)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	types "github.com/DoomSentinel/scheduler/scheduler/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockScheduler is a mock of Scheduler interface
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// ReceiveNotifications mocks base method
func (m *MockScheduler) ReceiveNotifications(arg0 context.Context) (<-chan *types.ExecutionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveNotifications", arg0)
	ret0, _ := ret[0].(<-chan *types.ExecutionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveNotifications indicates an expected call of ReceiveNotifications
func (mr *MockSchedulerMockRecorder) ReceiveNotifications(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveNotifications", reflect.TypeOf((*MockScheduler)(nil).ReceiveNotifications), arg0)
}

// ScheduleTask mocks base method
func (m *MockScheduler) ScheduleTask(arg0 string, arg1 *types.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleTask indicates an expected call of ScheduleTask
func (mr *MockSchedulerMockRecorder) ScheduleTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleTask", reflect.TypeOf((*MockScheduler)(nil).ScheduleTask), arg0, arg1)
}
