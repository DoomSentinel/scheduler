// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DoomSentinel/scheduler-api/gen/go/v1 (interfaces: SchedulerService_ExecutionNotificationsServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	scheduler "github.com/DoomSentinel/scheduler-api/gen/go/v1"
	gomock "github.com/golang/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockSchedulerService_ExecutionNotificationsServer is a mock of SchedulerService_ExecutionNotificationsServer interface
type MockSchedulerService_ExecutionNotificationsServer struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerService_ExecutionNotificationsServerMockRecorder
}

// MockSchedulerService_ExecutionNotificationsServerMockRecorder is the mock recorder for MockSchedulerService_ExecutionNotificationsServer
type MockSchedulerService_ExecutionNotificationsServerMockRecorder struct {
	mock *MockSchedulerService_ExecutionNotificationsServer
}

// NewMockSchedulerService_ExecutionNotificationsServer creates a new mock instance
func NewMockSchedulerService_ExecutionNotificationsServer(ctrl *gomock.Controller) *MockSchedulerService_ExecutionNotificationsServer {
	mock := &MockSchedulerService_ExecutionNotificationsServer{ctrl: ctrl}
	mock.recorder = &MockSchedulerService_ExecutionNotificationsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchedulerService_ExecutionNotificationsServer) EXPECT() *MockSchedulerService_ExecutionNotificationsServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockSchedulerService_ExecutionNotificationsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockSchedulerService_ExecutionNotificationsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSchedulerService_ExecutionNotificationsServer)(nil).Context))
}

// RecvMsg mocks base method
func (m *MockSchedulerService_ExecutionNotificationsServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockSchedulerService_ExecutionNotificationsServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSchedulerService_ExecutionNotificationsServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockSchedulerService_ExecutionNotificationsServer) Send(arg0 *scheduler.ExecutionNotificationsResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockSchedulerService_ExecutionNotificationsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSchedulerService_ExecutionNotificationsServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockSchedulerService_ExecutionNotificationsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockSchedulerService_ExecutionNotificationsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockSchedulerService_ExecutionNotificationsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockSchedulerService_ExecutionNotificationsServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockSchedulerService_ExecutionNotificationsServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSchedulerService_ExecutionNotificationsServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockSchedulerService_ExecutionNotificationsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockSchedulerService_ExecutionNotificationsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockSchedulerService_ExecutionNotificationsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockSchedulerService_ExecutionNotificationsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockSchedulerService_ExecutionNotificationsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockSchedulerService_ExecutionNotificationsServer)(nil).SetTrailer), arg0)
}
