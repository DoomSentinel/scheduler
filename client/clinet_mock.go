// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DoomSentinel/scheduler-api/gen/go/v1 (interfaces: SchedulerServiceClient)

// Package client is a generated GoMock package.
package client

import (
	context "context"
	scheduler "github.com/DoomSentinel/scheduler-api/gen/go/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockSchedulerServiceClient is a mock of SchedulerServiceClient interface
type MockSchedulerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerServiceClientMockRecorder
}

// MockSchedulerServiceClientMockRecorder is the mock recorder for MockSchedulerServiceClient
type MockSchedulerServiceClientMockRecorder struct {
	mock *MockSchedulerServiceClient
}

// NewMockSchedulerServiceClient creates a new mock instance
func NewMockSchedulerServiceClient(ctrl *gomock.Controller) *MockSchedulerServiceClient {
	mock := &MockSchedulerServiceClient{ctrl: ctrl}
	mock.recorder = &MockSchedulerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchedulerServiceClient) EXPECT() *MockSchedulerServiceClientMockRecorder {
	return m.recorder
}

// ExecutionNotifications mocks base method
func (m *MockSchedulerServiceClient) ExecutionNotifications(arg0 context.Context, arg1 *scheduler.ExecutionNotificationsRequest, arg2 ...grpc.CallOption) (scheduler.SchedulerService_ExecutionNotificationsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecutionNotifications", varargs...)
	ret0, _ := ret[0].(scheduler.SchedulerService_ExecutionNotificationsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecutionNotifications indicates an expected call of ExecutionNotifications
func (mr *MockSchedulerServiceClientMockRecorder) ExecutionNotifications(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecutionNotifications", reflect.TypeOf((*MockSchedulerServiceClient)(nil).ExecutionNotifications), varargs...)
}

// ScheduleCommandTask mocks base method
func (m *MockSchedulerServiceClient) ScheduleCommandTask(arg0 context.Context, arg1 *scheduler.ScheduleCommandTaskRequest, arg2 ...grpc.CallOption) (*scheduler.ScheduleCommandTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleCommandTask", varargs...)
	ret0, _ := ret[0].(*scheduler.ScheduleCommandTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleCommandTask indicates an expected call of ScheduleCommandTask
func (mr *MockSchedulerServiceClientMockRecorder) ScheduleCommandTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleCommandTask", reflect.TypeOf((*MockSchedulerServiceClient)(nil).ScheduleCommandTask), varargs...)
}

// ScheduleDummyTask mocks base method
func (m *MockSchedulerServiceClient) ScheduleDummyTask(arg0 context.Context, arg1 *scheduler.ScheduleDummyTaskRequest, arg2 ...grpc.CallOption) (*scheduler.ScheduleDummyTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleDummyTask", varargs...)
	ret0, _ := ret[0].(*scheduler.ScheduleDummyTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleDummyTask indicates an expected call of ScheduleDummyTask
func (mr *MockSchedulerServiceClientMockRecorder) ScheduleDummyTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleDummyTask", reflect.TypeOf((*MockSchedulerServiceClient)(nil).ScheduleDummyTask), varargs...)
}

// ScheduleRemoteTask mocks base method
func (m *MockSchedulerServiceClient) ScheduleRemoteTask(arg0 context.Context, arg1 *scheduler.ScheduleRemoteTaskRequest, arg2 ...grpc.CallOption) (*scheduler.ScheduleRemoteTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScheduleRemoteTask", varargs...)
	ret0, _ := ret[0].(*scheduler.ScheduleRemoteTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ScheduleRemoteTask indicates an expected call of ScheduleRemoteTask
func (mr *MockSchedulerServiceClientMockRecorder) ScheduleRemoteTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleRemoteTask", reflect.TypeOf((*MockSchedulerServiceClient)(nil).ScheduleRemoteTask), varargs...)
}
