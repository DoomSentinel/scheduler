// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DoomSentinel/scheduler-api/gen/go/v1 (interfaces: SchedulerService_ExecutionNotificationsClient)

// Package client is a generated GoMock package.
package client

import (
	context "context"
	scheduler "github.com/DoomSentinel/scheduler-api/gen/go/v1"
	gomock "github.com/golang/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockSchedulerService_ExecutionNotificationsClient is a mock of SchedulerService_ExecutionNotificationsClient interface
type MockSchedulerService_ExecutionNotificationsClient struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerService_ExecutionNotificationsClientMockRecorder
}

// MockSchedulerService_ExecutionNotificationsClientMockRecorder is the mock recorder for MockSchedulerService_ExecutionNotificationsClient
type MockSchedulerService_ExecutionNotificationsClientMockRecorder struct {
	mock *MockSchedulerService_ExecutionNotificationsClient
}

// NewMockSchedulerService_ExecutionNotificationsClient creates a new mock instance
func NewMockSchedulerService_ExecutionNotificationsClient(ctrl *gomock.Controller) *MockSchedulerService_ExecutionNotificationsClient {
	mock := &MockSchedulerService_ExecutionNotificationsClient{ctrl: ctrl}
	mock.recorder = &MockSchedulerService_ExecutionNotificationsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchedulerService_ExecutionNotificationsClient) EXPECT() *MockSchedulerService_ExecutionNotificationsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockSchedulerService_ExecutionNotificationsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockSchedulerService_ExecutionNotificationsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockSchedulerService_ExecutionNotificationsClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockSchedulerService_ExecutionNotificationsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockSchedulerService_ExecutionNotificationsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockSchedulerService_ExecutionNotificationsClient)(nil).Context))
}

// Header mocks base method
func (m *MockSchedulerService_ExecutionNotificationsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockSchedulerService_ExecutionNotificationsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockSchedulerService_ExecutionNotificationsClient)(nil).Header))
}

// Recv mocks base method
func (m *MockSchedulerService_ExecutionNotificationsClient) Recv() (*scheduler.ExecutionNotificationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*scheduler.ExecutionNotificationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockSchedulerService_ExecutionNotificationsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockSchedulerService_ExecutionNotificationsClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockSchedulerService_ExecutionNotificationsClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockSchedulerService_ExecutionNotificationsClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockSchedulerService_ExecutionNotificationsClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockSchedulerService_ExecutionNotificationsClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockSchedulerService_ExecutionNotificationsClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockSchedulerService_ExecutionNotificationsClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockSchedulerService_ExecutionNotificationsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockSchedulerService_ExecutionNotificationsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockSchedulerService_ExecutionNotificationsClient)(nil).Trailer))
}
