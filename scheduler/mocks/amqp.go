// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DoomSentinel/scheduler/scheduler (interfaces: AMQP)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	amqp "github.com/streadway/amqp"
	reflect "reflect"
	time "time"
)

// MockAMQP is a mock of AMQP interface
type MockAMQP struct {
	ctrl     *gomock.Controller
	recorder *MockAMQPMockRecorder
}

// MockAMQPMockRecorder is the mock recorder for MockAMQP
type MockAMQPMockRecorder struct {
	mock *MockAMQP
}

// NewMockAMQP creates a new mock instance
func NewMockAMQP(ctrl *gomock.Controller) *MockAMQP {
	mock := &MockAMQP{ctrl: ctrl}
	mock.recorder = &MockAMQPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAMQP) EXPECT() *MockAMQPMockRecorder {
	return m.recorder
}

// ConsumeNotifications mocks base method
func (m *MockAMQP) ConsumeNotifications() (<-chan amqp.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeNotifications")
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsumeNotifications indicates an expected call of ConsumeNotifications
func (mr *MockAMQPMockRecorder) ConsumeNotifications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeNotifications", reflect.TypeOf((*MockAMQP)(nil).ConsumeNotifications))
}

// ConsumeTasks mocks base method
func (m *MockAMQP) ConsumeTasks() (<-chan amqp.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsumeTasks")
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsumeTasks indicates an expected call of ConsumeTasks
func (mr *MockAMQPMockRecorder) ConsumeTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsumeTasks", reflect.TypeOf((*MockAMQP)(nil).ConsumeTasks))
}

// PublishDelayed mocks base method
func (m *MockAMQP) PublishDelayed(arg0 []byte, arg1 time.Duration, arg2 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishDelayed", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishDelayed indicates an expected call of PublishDelayed
func (mr *MockAMQPMockRecorder) PublishDelayed(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishDelayed", reflect.TypeOf((*MockAMQP)(nil).PublishDelayed), arg0, arg1, arg2)
}

// PublishNotification mocks base method
func (m *MockAMQP) PublishNotification(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishNotification", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishNotification indicates an expected call of PublishNotification
func (mr *MockAMQPMockRecorder) PublishNotification(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishNotification", reflect.TypeOf((*MockAMQP)(nil).PublishNotification), arg0)
}
