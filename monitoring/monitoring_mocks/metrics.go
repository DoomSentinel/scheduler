// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DoomSentinel/scheduler/monitoring (interfaces: SchedulerMetrics)

// Package monitoring_mocks is a generated GoMock package.
package monitoring_mocks

import (
	monitoring "github.com/DoomSentinel/scheduler/monitoring"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockSchedulerMetrics is a mock of SchedulerMetrics interface
type MockSchedulerMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMetricsMockRecorder
}

// MockSchedulerMetricsMockRecorder is the mock recorder for MockSchedulerMetrics
type MockSchedulerMetricsMockRecorder struct {
	mock *MockSchedulerMetrics
}

// NewMockSchedulerMetrics creates a new mock instance
func NewMockSchedulerMetrics(ctrl *gomock.Controller) *MockSchedulerMetrics {
	mock := &MockSchedulerMetrics{ctrl: ctrl}
	mock.recorder = &MockSchedulerMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchedulerMetrics) EXPECT() *MockSchedulerMetricsMockRecorder {
	return m.recorder
}

// AddExecuted mocks base method
func (m *MockSchedulerMetrics) AddExecuted(arg0 string) monitoring.SchedulerMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExecuted", arg0)
	ret0, _ := ret[0].(monitoring.SchedulerMetrics)
	return ret0
}

// AddExecuted indicates an expected call of AddExecuted
func (mr *MockSchedulerMetricsMockRecorder) AddExecuted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExecuted", reflect.TypeOf((*MockSchedulerMetrics)(nil).AddExecuted), arg0)
}

// AddScheduled mocks base method
func (m *MockSchedulerMetrics) AddScheduled(arg0 string) monitoring.SchedulerMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddScheduled", arg0)
	ret0, _ := ret[0].(monitoring.SchedulerMetrics)
	return ret0
}

// AddScheduled indicates an expected call of AddScheduled
func (mr *MockSchedulerMetricsMockRecorder) AddScheduled(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddScheduled", reflect.TypeOf((*MockSchedulerMetrics)(nil).AddScheduled), arg0)
}

// AddTaskFailed mocks base method
func (m *MockSchedulerMetrics) AddTaskFailed(arg0 string) monitoring.SchedulerMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTaskFailed", arg0)
	ret0, _ := ret[0].(monitoring.SchedulerMetrics)
	return ret0
}

// AddTaskFailed indicates an expected call of AddTaskFailed
func (mr *MockSchedulerMetricsMockRecorder) AddTaskFailed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTaskFailed", reflect.TypeOf((*MockSchedulerMetrics)(nil).AddTaskFailed), arg0)
}

// AddTaskSuccess mocks base method
func (m *MockSchedulerMetrics) AddTaskSuccess(arg0 string) monitoring.SchedulerMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTaskSuccess", arg0)
	ret0, _ := ret[0].(monitoring.SchedulerMetrics)
	return ret0
}

// AddTaskSuccess indicates an expected call of AddTaskSuccess
func (mr *MockSchedulerMetricsMockRecorder) AddTaskSuccess(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTaskSuccess", reflect.TypeOf((*MockSchedulerMetrics)(nil).AddTaskSuccess), arg0)
}

// UpdateExecutionTime mocks base method
func (m *MockSchedulerMetrics) UpdateExecutionTime(arg0 string, arg1 time.Duration) monitoring.SchedulerMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExecutionTime", arg0, arg1)
	ret0, _ := ret[0].(monitoring.SchedulerMetrics)
	return ret0
}

// UpdateExecutionTime indicates an expected call of UpdateExecutionTime
func (mr *MockSchedulerMetricsMockRecorder) UpdateExecutionTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExecutionTime", reflect.TypeOf((*MockSchedulerMetrics)(nil).UpdateExecutionTime), arg0, arg1)
}
